<?php
	class User extends CI_Controller {

		function index() {
			$data['main_content'] = "sign_in";
			$this->load->view('templates/template', $data);
		}

		//=====================LOG IN FUNCTION===========================/
		function sign_in()
		{
			if ($this->session->userdata('is_logged_in'))
			{
				$data['main_content'] = 'home';
				$this->load->view('templates/template', $data);
				return;
			}
			$data['page_title'] = 'Sign In';
			$data['main_content'] = "sign_in";
			$this->load->view('templates/template', $data);
		}

		function facebookLogin(){
			$data['page_title']='Facebook Login';
			$data['main_content']='facebookLogin';
			$this->load->view('templates/template', $data);
		}

		function validate_login()
		{
			$this->load->model('user_model');
			$q = $this->user_model->validate_login();
			if ($q)
			{
				$data = array(
					'user'  => $this->user_model->get_user($this->input->post('email_address'))->row(),
					'is_logged_in'   => TRUE
					);

				// Store user info in $_SESSION
				$this->session->set_userdata($data);

				$data['main_content'] = 'member_area'; // redirect the browser to the page that request this function
				$this->load->view('templates/template', $data);
			}
			else
			{
				$data['id_pwd_not_matched'] = TRUE;
				$data['main_content'] = 'sign_in';
				$this->load->view('templates/template', $data);
			}
		}


		//=====================LOGGING OUT FUNCTION===========================//
		function log_out()
		{
	        $this->session->sess_destroy();
	        session_unset();
	        $this->index();
		}

		//=====================SIGN UP FUNCTION===========================//
		function sign_up()
		{
			$data['page_title'] = 'Sign Up';
			$data['main_content'] = 'sign_up';
			$this->load->view('templates/template', $data);
		}

		function add_user()
		{
			$this->load->model('user_model');

			// $this->form_validation->set_rules('username', 'Username', 'required|min_length[6]|is_unique[user_info.username]|alpha_dash');
			$this->form_validation->set_rules('password', 'Password', 'required|min_length[6]');
			$this->form_validation->set_rules('email_address', 'Email', 'required|valid_email|is_unique[user_info.email_address]');

			if ($this->form_validation->run() == FALSE)
			{
				$data['main_content'] = 'sign_up';
				$this->load->view('templates/template', $data);
			}

			else
			{
				// create new member
				$email_address       = $this->input->post('email_address');
				$password            = md5($this->input->post('password'));
				$activation_code     = $this->user_model->_random_string(22);
				$password_reset_code = $this->user_model->_random_string(22);

				// send activation email
				$this->send_activation_email($email_address, $activation_code);
				if($this->user_model->register_user($email_address, $password, $activation_code, $password_reset_code))
				{
					// save user data for current session
					$data = array($email_address);

					$this->session->set_userdata($data);
					$data['main_content'] = 'sign_up_successful';
					$this->load->view('templates/template', $data);
				}
				else
				{
					// registration not successful - reload the page
					$this->load->view('sign_up');
				}
			}
		}

		//=====================ACCOUNT ACTIVATION=========================//
		function activation_confirm()
		{
			$activation_code = $this->uri->segment(3);

			if ($activation_code == '')
			{
				echo 'Error no registration code in URL';
				exit();
			}

			$this->load->model('user_model');
			$q = $this->user_model->confirm_registration($activation_code);
			if ($q)
			{
				$data['page_title'] = 'Thank You For Registering';
				$data['main_content'] = 'account_activated';
				$this->load->view('templates/template', $data);
			}

			// WHEN INVALID ACTIVATION LINK
			else
				echo "Please go to your email and click on the link again";
		}

		function send_activation_email($email_address, $activation_code)
		{
			//send activation emails
			$this->email->from('phamminh91@gmail.com', 'The Gourmet');
			$this->email->to($email_address);
			$this->email->subject('Registration Confirmation');
			$this->email->message('Please click this link to confirm your registration'
								. anchor('/user/activation_confirm/' . $activation_code, 'Confirm Registration'));
			$this->email->send();
		}

		//===================== PASSWORD RESET =========================//
		function forgot_password()
		{
			$data['page_title'] = 'Reset Password';
			$data['main_content'] = 'forgot_password';
			$this->load->view('templates/template', $data);
		}

		function send_password_reset_code()
		{
			$email_address = $this->input->post('email_address');

			$this->load->model('user_model');
			$pwd_code = $this->user_model->get_password_reset_code($email_address);
			if ($pwd_code != null)
			{
				$this->email->from('phamminh91@gmail.com', 'The Gourmet');
				$this->email->to($email_address);
				$this->email->subject('Password Reset Confirmation');
				$this->email->message('If you have not asked our system to reset your password, please ignore this email. Otherwise, please click this link to proceed to reset your password'
							  .anchor('/user/confirm_reset/'.$email_address."/".$pwd_code, "<br /> Reset Password.")." Thank you!");
				$this->email->send();
			}
			else
				$this->forgot_password();
		}

		function confirm_reset()
		{
			$email_address = $this->uri->segment(3);
			$reset_code = $this->uri->segment(4);

			if ($reset_code == '')
			{
				echo 'Error no reset code in URL';
				exit();
			}

			$this->load->model('user_model');

			$q = $this->user_model->confirm_reset_password($reset_code);
			if ($q)
			{
				$data['main_content'] = 'reset_password'.$email_address;
				$this->load->view('templates/template', $data);
			}
		}

		function reset_password($email_address)
		{
			$new_pwd = $this->input->post('new_pwd');
			$confirm_pwd = $this->input->post('confirm_pwd');
			if ($new_pwd == $confirm_pwd)
			{
				$query_str = 'UPDATE user_info SET password = ? WHERE email_address = ?';
				$query_data = array($new_pwd, $email_address);
				$this->db->query($query, $query_data);
			}
		}

		//===================== UPDATE PROFILE =========================//
		function edit_profile()
		{
			if ($this->session->userdata('is_logged_in'))
			{
				// load current user's info
				$this->load->model('user_model');
				$email_address = $this->session->userdata('user')->email_address;
				$user          = $this->user_model->get_user($email_address)->row();
				$this->session->set_userdata('user', $user);

				// load view
				$data['page_title']   = 'Profile';
				$data['main_content'] = 'edit_profile';
				$this->load->view('templates/template', $data);
			}
		}

		function update_profile($form_name)
		{
			$this->load->model('user_model');
			switch ($form_name) {
				case 'form_name':
					$this->form_validation->set_rules('first_name', 'First name', 'required|min_length[2]');
					$this->form_validation->set_rules('last_name', 'Last name', 'required|min_length[1]');
					if ($this->form_validation->run())
						$this->user_model->update_profile($form_name, $this->session->userdata('user')->user_id);
					$this->edit_profile();
					break;

				case 'form_email':
					$this->form_validation->set_rules('email_address', 'Email', 'required|valid_email|is_unique[user_info.email_address]');
					if ($this->form_validation->run())
						$this->user_model->update_profile($form_name, $this->session->userdata('user')->user_id);
					$this->edit_profile();
					break;

				case 'form_gender':
					$this->form_validation->set_rules('gender', 'Gender', 'required');
					if ($this->form_validation->run())
						$this->user_model->update_profile($form_name, $this->session->userdata('user')->user_id);
					$this->edit_profile();
					break;

				case 'form_height':
					$this->form_validation->set_rules('height', 'Height', 'required');
					if ($this->form_validation->run())
						$this->user_model->update_profile($form_name, $this->session->userdata('user')->user_id);
					$this->edit_profile();
					break;

				case 'form_weight':
					$this->form_validation->set_rules('weight', 'Weight', 'required');
					if ($this->form_validation->run())
						$this->user_model->update_profile($form_name, $this->session->userdata('user')->user_id);
					$this->edit_profile();
					break;

				case 'form_preference':
					$preference = $this->input->post("preference");
					$count = count($preference);
					if (!empty($preference) or $count==0)
					{
						$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'vegetarian', 0);
						$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'halal', 0);
					}

					$count = count($preference);
					if ($count==1)
					{
						if (strtolower($preference[0]) == 'vegetarian')
						{
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'vegetarian', 1);
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'halal', 0);
						}
						else if (strtolower($preference[0]) == 'halal')
						{
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'vegetarian', 0);
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'halal', 1);
						}
					}
					else if ($count == 2)
					{
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'vegetarian', 1);
							$this->user_model->update_a_field($this->session->userdata('user')->user_id, 'halal', 1);
					}
					$this->edit_profile();
					break;

				default:
					$this->edit_profile();
					break;
			}
		}

		//===================== UPLOAD RECIPE =========================//
		function upload_recipe()
		{
			if ($this->session->userdata('is_logged_in'))
			{
				$data['page_title'] = 'Upload Recipe';
				$data['main_content'] = 'upload_recipe';
				$this->load->model('recipe_model');
				// echo $this->recipe_model->cal_calories('4 oz cheddar');
				$this->load->view('templates/template', $data);
			}
			else
			{
				$data['main_content'] = 'forgot_password';
				$data['main_content'] = 'sign_in';
				$this->load->view('templates/template', $data);
			}
		}

		function create_recipe()
		{
			$this->load->model('recipe_model');

			$this->form_validation->set_rules('name', 'Recipe\'s name', 'required|min_length[6]');
			$this->form_validation->set_rules('description', 'Description', 'required|min_length[30]|max_length[300]');
			$this->form_validation->set_rules('ingredients', 'Ingredients', 'required|min_length[30]');
			$this->form_validation->set_rules('steps', 'Steps', 'required|min_length[30]');
			// $this->form_validation->set_rules('userfile', 'Picture', 'required');

			if ($this->form_validation->run() == FALSE)
			{
				$data['main_content'] = 'upload_recipe';
				$this->load->view('templates/template', $data);
			}
			else
			{
				// if($query=$this->recipe_model->create_recipe())
				$recipe_id=$this->recipe_model->create_recipe();
				$this->db->select('recipe_id, recipe_name, meal_time, description, num_of_likes');
				$this->db->where('recipe_id', $recipe_id);

				$data['recipe'] = $this->db->get('recipes')->row();
				$data['main_content'] = 'upload_successful';
				$this->load->view('templates/template', $data);
				// else
				// 	$this->upload_recipe();
			}
		}

		function plan_meal()
		{
			$data['main_content'] = 'plan_meal';
			$this->load->view('templates/template', $data);
		}

		//-------------------------Get favorites---------------------------//
		function favorites()
		{
			//get records
			$user_id = $this->session->userdata('user')->user_id;
			$this->load->model('user_model');
			$records=$this->user_model->get_favorites($user_id);
			//config pagination
			$this->load->library('pagination');
			$config['total_rows']     = $records->num_rows();
			$config['per_page']       = 3;
			$config['num_links']      = 3;
			$config['base_url']       = base_url().'index.php/user/favorites';
			$config['full_tag_open']  = '<div class="pagination-link">';
			$config['full_tag_close'] = '</div>';
			$this->pagination->create_links();
			$this->pagination->initialize($config);


			//$this->db->from('recipes');
			//$this->db->join('user_favorites','user_favorites.recipe_id=recipes.recipe_id');
			//$data['records'] = $this->db->get('recipes', $config['per_page'], $this->uri->segment(3));
			$data['records']=$records;


			$data['main_content']='view_favorites';
			$this->load->view('templates/template',$data);
		}
	}
?>