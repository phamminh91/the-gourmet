<?php
class Recipe_model extends CI_Model
{
	var $gallery_path;
	var $gallery_path_thumb;
	var $gallery_path_url;

	function __construct()
	{
		parent::__construct();
		$this->gallery_path = realpath(APPPATH . '../media/recipe_imgs/');
		$this->gallery_path_url = base_url().'media/recipe_imgs/';
	}

	//===================== CREATE A NEW RECIPE ========================/
	function create_recipe()
	{
		$vege_value = 0; //unchecked

		if(isset($_POST['vegetarian'])) {
			$value = $_POST['vegetarian'];
			if ($value=='vege')
				$vege_value = 1;
		}

		$new_recipe = array(
			'recipe_name' => $this->input->post('name'),
			'description' => $this->input->post('description'),
			'meal_time'   => $this->input->post('meal_time'),
			'vegetarian'  => $vege_value,
			'ingredients' => $this->input->post('ingredients'),
			'steps'       => $this->input->post('steps'),
			'calories'    => $this->cal_calories($this->input->post('ingredients')),
			);

		$insert = $this->db->insert('recipes',$new_recipe);
		$cur_id = $this->db->insert_id();
		$this->upload_image($cur_id);

		// insert into upload table
		$upload_data = array(
			'user_id' => $this->session->userdata('user_id'),
			'recipe_id' => $cur_id,
			'time_uploaded' => $this->get_current_time(),
			);
		$this->db->insert('uploaded', $upload_data);

		return $cur_id;
	}


	function get_recipe_id($recipe_name) {
		$query_str = 'SELECT recipe_id FROM recipes WHERE recipe_name = ?';
		$result = $this->db->query($query_str, $recipe_name);

		if ($result->num_rows == 1)
		{
			foreach ($result->result() as $row)
				$recipe_id = $row->recipe_id;
			return $recipe_id;
		}
	}

	function upload_image($recipe_id) {
		// upload images
		$config = array(
			'allowed_types' => 'jpg|jpeg|gif|png|bmp',
			'upload_path'   => $this->gallery_path,
			'file_name'     => $recipe_id,
			'overwrite'		=> TRUE,
			'max_size'      => 8000
			);

		$this->load->library('upload', $config);
		$q = $this->upload->do_upload(); 				// do upload

		$image_data = $this->upload->data(); 		//get image data
		// create a thumbnail
		$config = array(
			'source_image'    => $image_data['full_path'],
			'new_image'       => $this->gallery_path . '/thumbs',
			'maintain_ration' => true,
			'width'           => 500,
			'height'          => 313,
			);

		$this->load->library('image_lib', $config);
		$this->image_lib->resize();

		//resize original picture
		/*$config['source_image'] = $this->upload->upload_path.$this->upload->file_name;
        $config['maintain_ratio'] = FALSE;
        $config['width'] = 1024;
        $this->load->library('image_lib', $config);
        $this->image_lib->resize();
		*/
	}


	function get_images($id)
	{
		$files = scandir($this->gallery_path);

		$files = array_diff($files, array('.', '..', 'thumbs'));

		$images = array();

		foreach ($files as $file) {
			$images []= array (
				'url' => $this->gallery_path_url . $file,
				'thumb_url' => $this->gallery_path_url . 'thumbs/' . $file
				);
		}

		return $images;
	}

	// return a timestamp YYYY-MM-DD HH:MM:SS
	function get_current_time()
	{
		$this->load->helper('date');
		$datestring = "%Y-%m-%d %h:%m:%s";
		$timezone = 'UP8';
		$upload_time = mdate($datestring, gmt_to_local(time(), $timezone, FALSE));

		return $upload_time;
	}

	//======================= GET NUTRITIENTS INFO ==========================/
	function cal_calories($ingredients)
	{
		// $ingred_list = explode('\n\r',$ingredients);
		// $total_cal = 0;
		// foreach($ingred_list as $string)
		// {
		// 	$quantity = floatval($string);//get quantitiy
		// 	//(won't work if format is in calculation, e.g 2*300)
		// 	$substring = substr($string,strlen($quantity));
		// 	//get the rest of the string;
		// 	$element = explode(" ",$substring);
		// 	if($element[0]==null)
		// 		$i=1;
		// 	else
		// 		$i=0;
		// 	$unit = $element[$i];//get unit
		// 	unset($element[$i]);
		// 	if($element[$i+1]=='of')
		// 		unset($element[$i+1]);
		// 	$ingred = substr(implode("%",$element),$i+0).'%';
		// 	$temp_cal = $this->get_ingredient($quantity,$unit,$ingred);
		// 	$total_cal += $temp_cal;
		// }
		// return $total_cal;
		return 0;
	}

	private function get_ingredient($get_quantity,$get_unit,$get_ingred)
	{
		// $standard_unit = $this->convert_unit($get_unit);
		// $query = 'SELECT num_cal FROM calories WHERE name_ingredient LIKE ?';
		// $ingred_num = $this->db->query($query,$get_ingred);
		// if($ingred_num->num_rows == 1)
		// {
		// 	$row =$ingred_num->row();
		// 	$ingred_cal = $get_quantity*$standard_unit*$row->num_cal;
		// 	return $ingred_cal;
		// }
		// else if($ingred_num->num_rows >1)
		// {
		// 	$ingred_cal_total=0;
		// 	foreach($ingred_num->result() as $row)
		// 		$ingred_cal_total += $row->num_cal;
		// 	$ingred_cal=$ingred_cal_total/$ingred_num->num_rows;
		// 	return $ingred_cal;
		// }
		return 0;
	}

	private function convert_unit($raw_unit)
	{
		switch($raw_unit)
		{
			case "ounce":
			case "ounces":
			case "oz":
			return 1;
			case "g":
			case "grams":
			case "gram":
			case "ml":
			return 0.035;
			case "kg":
			case "kgs":
			case "l":
			case "litre":
			return 35;
			case "tablespoon":
			return 0.5;
			case "cup":
			return 8;
			case "teaspoon":
			case "teaspoons":
			case "tsp":
			return 0.17;
			default:
			return 1;
		}
	}

	//======================= SEARCH FOR A RECIPE ==========================/
	function search_recipe()
	{
		$this->init_pagination();

		$query_str = 'SELECT *
		FROM recipes
		WHERE Match(recipe_name, description, ingredients, steps) Against (? IN BOOLEAN MODE)';
	}

	function meal_time($q)
	{
		$q_int = 0;
		if ($q=="lunch") $q_int = 1;
		else if ($q=="dinner") $q_int = 2;

		$this->init_pagination();
		$query_str = 'SELECT *
					  FROM recipes
					  WHERE meal_time = ?
					  ORDER BY num_of_likes DESC';
		$query_r   = $this->db->query($query_str, $q_int);
		return $query_r;
	}

	function add_to_favorite($user_id, $recipe_id)
	{
		$data = array('user_id' => $user_id, 'recipe_id' => $recipe_id);
		$this->db->insert('user_favorites', $data);
		$query_str = "UPDATE recipes SET num_of_likes = num_of_likes+1 WHERE recipe_id = ?";
		$this->db->query($query_str, $recipe_id);
	}

	function unfavorite($user_id, $recipe_id)
	{
		$query_str = "DELETE FROM user_favorites
					  WHERE user_id = $user_id AND recipe_id = ?";
		$this->db->query($query_str, $recipe_id);
	}
}

?>